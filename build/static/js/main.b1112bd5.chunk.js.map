{"version":3,"sources":["levels.config.js","game.service.js","components/Timer.js","components/Display.js","components/Btn.js","components/Hole.js","components/Holes.js","App.js","index.js"],"names":["levelsConfig","holesCount","scoreToNext","Game","isEventsRunning","showTimeoutId","hideTimeoutId","currentLevel","setLevel","setMtxCallback","this","levels","holesMtx","generateMtx","console","log","count","Array","fill","map","item","i","active","num","showTime","Math","round","random","stayTime","hideTime","activeHole","runEvents","score","nextLevel","clearEvents","clearTimeout","event","isRender","JSON","stringify","mtx","_setMtxCb","generateEvent","setTimeout","renderEvent","interval","Timer","isRun","useState","time","setTime","useEffect","setInterval","prev","clearInterval","className","Display","misses","level","Btn","handler","onClick","Hole","Holes","holeClickHandler","game","App","getHolesCount","setMtx","setIsRun","setScore","setMisses","getLevel","bindHooks","stopEvents","sucessState","miss","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1112bd5.chunk.js","sourcesContent":["const levelsConfig = {\n    1: {\n        holesCount: 4,\n        scoreToNext: 5\n    },\n    2: {\n        holesCount: 9,\n        scoreToNext: 15\n    },\n    3: {\n        holesCount: 12,\n        scoreToNext: 25\n    },\n    4: {\n        holesCount: 16,\n        scoreToNext: 35\n    },\n    5: {\n        holesCount: 20,\n        scoreToNext: 50\n    },\n    6: {\n        holesCount: 25,\n        scoreToNext: 10000\n    }\n}\n\nexport default levelsConfig;","import levels from './levels.config';\n\nexport default class Game {\n    isEventsRunning = false;\n    showTimeoutId = null;\n    hideTimeoutId = null;\n    currentLevel = 1;\n\n    //hooks\n    setLevel = null;\n    setMtxCallback = null;\n\n    constructor () {\n        this.holesCount = levels[this.currentLevel].holesCount;\n        this.holesMtx = this.generateMtx(this.holesCount);\n        console.log('game::::::', this)\n    }\n\n    getHolesCount () {\n        return this.holesCount;\n    }\n\n    getLevel () {\n        return this.currentLevel;\n    }\n\n    bindHooks ({setLevel}) {\n        this.setLevel = setLevel;\n    }\n\n    generateMtx (count) {\n        return new Array(count).fill('').map((item, i) => ({ active: false, num: i }));\n    }\n\n    generateEvent () {\n        const showTime = Math.round(Math.random() * 2000);\n        const stayTime = Math.round(Math.random() * 5000);\n        const hideTime = showTime + stayTime;\n        const activeHole = Math.round(Math.random() * (this.holesCount - 1));\n        return {\n            showTime,\n            stayTime,\n            hideTime, \n            activeHole\n        } \n    }\n\n    nextLevel () {\n        this.currentLevel++;\n        this.setLevel(this.currentLevel);\n        this.holesCount = levels[this.currentLevel].holesCount;\n        this.setMtxCallback(this.generateMtx(this.holesCount));\n        this.runEvents(this.setMtxCallback);\n    }\n\n    sucessState (score) {\n        if (score >= levels[this.currentLevel].scoreToNext) {\n            this.nextLevel();\n            this.clearEvents();\n            return\n        }\n        this.clearEvents();\n        this.runEvents(this.setMtxCallback);\n    }\n\n    clearEvents() {\n        clearTimeout(this.showTimeoutId);\n        clearTimeout(this.hideTimeoutId);\n    }\n\n    renderEvent (event, isRender) {\n        console.log(`${isRender ? 'show' : 'hide'}::::::`, JSON.stringify(event, null, 2));\n\n        //disable render when game is stopped\n        if (isRender && !this.isEventsRunning) {\n            this.clearEvents();\n            return;\n        }\n\n        //render event\n        if (isRender) {\n            this.setMtxCallback(mtx => {\n                mtx[event.activeHole].active = true;\n                return [...mtx];\n            });\n\n            return;\n        } \n\n        //unrender event and call new event if not stopped\n        this.setMtxCallback(mtx => {\n            mtx[event.activeHole].active = false;\n            return [...mtx];\n        });\n\n        if (!this.isEventsRunning) {\n            this.clearEvents();\n            return;\n        }\n        this.runEvents(this.setMtxCallback);\n    }\n\n    runEvents (_setMtxCb) {\n        this.isEventsRunning = true;\n        this.setMtxCallback = _setMtxCb;\n        const event = this.generateEvent();\n        this.showTimeoutId = setTimeout(() => this.renderEvent(event, true), event.showTime);\n        this.hideTimeoutId = setTimeout(() => this.renderEvent(event, false), event.hideTime)\n    }\n\n    stopEvents () {\n        this.isEventsRunning = false;\n    }\n}","import React, {useState, useEffect} from 'react';\n\nlet interval = null;\n\nexport const Timer = ({isRun}) => {\n  const [time, setTime] = useState(0);\n\n   useEffect(() => {\n      if (isRun) {\n        interval = setInterval(() => {\n          setTime(prev => prev + 1);\n        }, 1000);\n      } else {\n        clearInterval(interval);\n      }\n    }, [isRun]);\n\n   return <div className=\"timer\">Timer: {time}</div>\n}","import React from 'react';\nimport {Timer} from './Timer';\n\nexport const Display = ({score, isRun, misses, level}) => {\n    return (\n        <div className=\"display\">\n            <Timer isRun={isRun}/>\n            <div className=\"score\">\n                Score: {score}\n            </div>\n            <div className=\"misses\">\n                Misses: {misses}\n            </div>\n            <div className=\"level\">\n                Level: {level}\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport const Btn = ({handler, isRun}) => {\n    return (\n        <button \n            className={`btn btn--${isRun ? 'stop' : 'start'}`} \n            onClick={handler}\n        >\n            {isRun ? 'Stop' : 'Start'}\n        </button>\n    )\n}","import React from 'react';\n\nexport const Hole = ({item, handler}) => {\n    return (\n        <div className=\"hole-wrap\" >\n          <div className={`hole${item.active ? ' active' : ''}`} onClick={handler}>\n            {/* {item.num} */}\n            <br/>\n            {/* {'' + item.active} */}\n          </div>\n        </div>\n      )\n}","import React from 'react';\nimport {Hole} from './Hole';\n\nexport const Holes = ({holesCount, mtx, holeClickHandler}) => {\n    return (\n        <div className={`field cols-${holesCount}`}>\n            { mtx.map(item => <Hole key={item.num + '' + item.active} item={item} handler={() => holeClickHandler(item)} />) }\n        </div>\n    )\n}","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Game from './game.service';\nimport {Display} from './components/Display';\nimport {Btn} from './components/Btn';\nimport {Holes} from './components/Holes';\n\nconst game = new Game();\n\nfunction App() {\n  const [mtx, setMtx] = useState(game.generateMtx(game.getHolesCount()));\n  const [isRun, setIsRun] = useState(false);\n  const [score, setScore] = useState(0);\n  const [misses, setMisses] = useState(0);\n  const [level, setLevel] = useState(game.getLevel());\n\n  useEffect(() => {\n    game.bindHooks({setLevel});\n  }, [])\n\n  useEffect(() => {\n    if (isRun) {\n      game.runEvents(setMtx);\n    } else {\n      setMtx(mtx => game.generateMtx(game.getHolesCount()));\n      game.stopEvents();\n    }\n  }, [isRun]);\n\n  const startStopHandler = () => setIsRun(run => !run);\n\n  const holeClickHandler = (item) => {\n    if (item.active) {\n      setScore(score => score + 1);\n      setMtx(mtx => game.generateMtx(game.getHolesCount()));\n      game.sucessState(score);\n    } else if (!item.active && isRun) {\n      setMisses(miss => miss + 1);\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <Display score={score} isRun={isRun} misses={misses} level={level} />\n      <Holes holesCount={game.getHolesCount()} mtx={mtx} holeClickHandler={holeClickHandler} />\n      <Btn handler={startStopHandler} isRun={isRun} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}